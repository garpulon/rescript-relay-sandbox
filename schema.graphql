type OperationMessage implements OperationMessageInterface {
  """The classification or severity of this message."""
  level: String!

  """
  A human readable message to be used when the client does not know how to interpret this message.
  """
  message: String!

  """
  A list of path components to the location in the input at which this message was generated.
  """
  path: [String!]
}

interface OperationMessageInterface {
  """The classification or severity of this message."""
  level: String!

  """
  A human readable message to be used when the client does not know how to interpret this message.
  """
  message: String!

  """
  A list of path components to the location in the input at which this message was generated.
  """
  path: [String!]
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  id: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    id: ID!
  ): Node

  """Reads and enables pagination through a set of `EmailTemplate`."""
  emailTemplates(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `EmailTemplate`."""
    orderBy: [EmailTemplatesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmailTemplateCondition
  ): EmailTemplatesConnection

  """Reads and enables pagination through a set of `EmailTemplateId`."""
  emailTemplateIds(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `EmailTemplateId`."""
    orderBy: [EmailTemplateIdsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmailTemplateIdCondition
  ): EmailTemplateIdsConnection

  """Reads and enables pagination through a set of `Forum`."""
  forums(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Forum`."""
    orderBy: [ForumsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ForumCondition
  ): ForumsConnection

  """Reads and enables pagination through a set of `User`."""
  users(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition
  ): UsersConnection
  emailTemplate(templateId: String!): EmailTemplate
  emailTemplateId(templateId: String!): EmailTemplateId
  forum(rowId: Int!): Forum
  forumBySlug(slug: String!): Forum
  post(rowId: Int!): Post
  topic(rowId: Int!): Topic
  currentUser: User
  currentUserIsAdmin: Boolean

  """Reads and enables pagination through a set of `Forum`."""
  forumsAboutCats(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor
  ): ForumsConnection

  """Chosen by fair dice roll. Guaranteed to be random. XKCD#221"""
  randomNumber: Int

  """Reads a single `EmailTemplate` using its globally unique `ID`."""
  emailTemplateById(
    """
    The globally unique `ID` to be used in selecting a single `EmailTemplate`.
    """
    id: ID!
  ): EmailTemplate

  """Reads a single `EmailTemplateId` using its globally unique `ID`."""
  emailTemplateIdById(
    """
    The globally unique `ID` to be used in selecting a single `EmailTemplateId`.
    """
    id: ID!
  ): EmailTemplateId

  """Reads a single `Forum` using its globally unique `ID`."""
  forumById(
    """The globally unique `ID` to be used in selecting a single `Forum`."""
    id: ID!
  ): Forum

  """Reads a single `Post` using its globally unique `ID`."""
  postById(
    """The globally unique `ID` to be used in selecting a single `Post`."""
    id: ID!
  ): Post

  """Reads a single `Topic` using its globally unique `ID`."""
  topicById(
    """The globally unique `ID` to be used in selecting a single `Topic`."""
    id: ID!
  ): Topic
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
}

"""A connection to a list of `EmailTemplate` values."""
type EmailTemplatesConnection {
  """A list of `EmailTemplate` objects."""
  nodes: [EmailTemplate!]!

  """
  A list of edges which contains the `EmailTemplate` and cursor to aid in pagination.
  """
  edges: [EmailTemplatesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `EmailTemplate` you could get from the connection."""
  totalCount: Int!
}

type EmailTemplate implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  templateId: String!
  senderEmail: Email!
  subjectTemplate: String!
  plaintextTemplate: String!
  htmlTemplate: String!
  updatedAt: Datetime!
  lastEditedByUser: String!

  """
  Reads a single `EmailTemplateId` that is related to this `EmailTemplate`.
  """
  template: EmailTemplateId
}

scalar Email

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

type EmailTemplateId implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  templateId: String!

  """
  Reads a single `EmailTemplate` that is related to this `EmailTemplateId`.
  """
  emailTemplateByTemplateId: EmailTemplate
}

"""A `EmailTemplate` edge in the connection."""
type EmailTemplatesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `EmailTemplate` at the end of the edge."""
  node: EmailTemplate!
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

"""Methods to use when ordering `EmailTemplate`."""
enum EmailTemplatesOrderBy {
  NATURAL
  TEMPLATE_ID_ASC
  TEMPLATE_ID_DESC
  SENDER_EMAIL_ASC
  SENDER_EMAIL_DESC
  SUBJECT_TEMPLATE_ASC
  SUBJECT_TEMPLATE_DESC
  PLAINTEXT_TEMPLATE_ASC
  PLAINTEXT_TEMPLATE_DESC
  HTML_TEMPLATE_ASC
  HTML_TEMPLATE_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  LAST_EDITED_BY_USER_ASC
  LAST_EDITED_BY_USER_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `EmailTemplate` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input EmailTemplateCondition {
  """Checks for equality with the object’s `templateId` field."""
  templateId: String

  """Checks for equality with the object’s `senderEmail` field."""
  senderEmail: Email

  """Checks for equality with the object’s `subjectTemplate` field."""
  subjectTemplate: String

  """Checks for equality with the object’s `plaintextTemplate` field."""
  plaintextTemplate: String

  """Checks for equality with the object’s `htmlTemplate` field."""
  htmlTemplate: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `lastEditedByUser` field."""
  lastEditedByUser: String
}

"""A connection to a list of `EmailTemplateId` values."""
type EmailTemplateIdsConnection {
  """A list of `EmailTemplateId` objects."""
  nodes: [EmailTemplateId!]!

  """
  A list of edges which contains the `EmailTemplateId` and cursor to aid in pagination.
  """
  edges: [EmailTemplateIdsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `EmailTemplateId` you could get from the connection.
  """
  totalCount: Int!
}

"""A `EmailTemplateId` edge in the connection."""
type EmailTemplateIdsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `EmailTemplateId` at the end of the edge."""
  node: EmailTemplateId!
}

"""Methods to use when ordering `EmailTemplateId`."""
enum EmailTemplateIdsOrderBy {
  NATURAL
  TEMPLATE_ID_ASC
  TEMPLATE_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `EmailTemplateId` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input EmailTemplateIdCondition {
  """Checks for equality with the object’s `templateId` field."""
  templateId: String
}

"""A connection to a list of `Forum` values."""
type ForumsConnection {
  """A list of `Forum` objects."""
  nodes: [Forum!]!

  """
  A list of edges which contains the `Forum` and cursor to aid in pagination.
  """
  edges: [ForumsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Forum` you could get from the connection."""
  totalCount: Int!
}

"""A subject-based grouping of topics and posts."""
type Forum implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  rowId: Int!

  """An URL-safe alias for the `Forum`."""
  slug: String!

  """The name of the `Forum` (indicates its subject matter)."""
  name: String!

  """A brief description of the `Forum` including it's purpose."""
  description: String!
  createdAt: Datetime!
  updatedAt: Datetime!

  """Reads and enables pagination through a set of `Topic`."""
  topics(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Topic`."""
    orderBy: [TopicsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TopicCondition
  ): TopicsConnection!
}

"""A connection to a list of `Topic` values."""
type TopicsConnection {
  """A list of `Topic` objects."""
  nodes: [Topic!]!

  """
  A list of edges which contains the `Topic` and cursor to aid in pagination.
  """
  edges: [TopicsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Topic` you could get from the connection."""
  totalCount: Int!
}

"""An individual message thread within a Forum."""
type Topic implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  rowId: Int!
  forumId: Int!
  authorId: String!

  """The title of the `Topic`."""
  title: String!

  """The body of the `Topic`, which Posts reply to."""
  body: String!
  createdAt: Datetime!
  updatedAt: Datetime!

  """Reads a single `Forum` that is related to this `Topic`."""
  forum: Forum

  """Reads a single `User` that is related to this `Topic`."""
  author: User

  """Reads and enables pagination through a set of `Post`."""
  posts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Post`."""
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PostCondition
  ): PostsConnection!
  bodySummary(maxLength: Int): String
}

type User {
  email: String!
  isAdmin: Boolean!
  avatarUrl: String

  """Reads and enables pagination through a set of `Post`."""
  authoredPosts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Post`."""
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PostCondition
  ): PostsConnection!

  """Reads and enables pagination through a set of `Topic`."""
  authoredTopics(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Topic`."""
    orderBy: [TopicsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TopicCondition
  ): TopicsConnection!
}

"""A connection to a list of `Post` values."""
type PostsConnection {
  """A list of `Post` objects."""
  nodes: [Post!]!

  """
  A list of edges which contains the `Post` and cursor to aid in pagination.
  """
  edges: [PostsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Post` you could get from the connection."""
  totalCount: Int!
}

"""An individual message thread within a Forum."""
type Post implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  rowId: Int!
  topicId: Int!
  authorId: String!

  """The body of the `Topic`, which Posts reply to."""
  body: String!
  createdAt: Datetime!
  updatedAt: Datetime!

  """Reads a single `Topic` that is related to this `Post`."""
  topic: Topic

  """Reads a single `User` that is related to this `Post`."""
  author: User
}

"""A `Post` edge in the connection."""
type PostsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Post` at the end of the edge."""
  node: Post!
}

"""Methods to use when ordering `Post`."""
enum PostsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  TOPIC_ID_ASC
  TOPIC_ID_DESC
  AUTHOR_ID_ASC
  AUTHOR_ID_DESC
  BODY_ASC
  BODY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Post` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input PostCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `topicId` field."""
  topicId: Int

  """Checks for equality with the object’s `authorId` field."""
  authorId: String

  """Checks for equality with the object’s `body` field."""
  body: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""Methods to use when ordering `Topic`."""
enum TopicsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  FORUM_ID_ASC
  FORUM_ID_DESC
  AUTHOR_ID_ASC
  AUTHOR_ID_DESC
  TITLE_ASC
  TITLE_DESC
  BODY_ASC
  BODY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Topic` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input TopicCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `forumId` field."""
  forumId: Int

  """Checks for equality with the object’s `authorId` field."""
  authorId: String

  """Checks for equality with the object’s `title` field."""
  title: String

  """Checks for equality with the object’s `body` field."""
  body: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""A `Topic` edge in the connection."""
type TopicsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Topic` at the end of the edge."""
  node: Topic!
}

"""A `Forum` edge in the connection."""
type ForumsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Forum` at the end of the edge."""
  node: Forum!
}

"""Methods to use when ordering `Forum`."""
enum ForumsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  SLUG_ASC
  SLUG_DESC
  NAME_ASC
  NAME_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Forum` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ForumCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `slug` field."""
  slug: String

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""A connection to a list of `User` values."""
type UsersConnection {
  """A list of `User` objects."""
  nodes: [User!]!

  """
  A list of edges which contains the `User` and cursor to aid in pagination.
  """
  edges: [UsersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection."""
type UsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User!
}

"""Methods to use when ordering `User`."""
enum UsersOrderBy {
  NATURAL
  EMAIL_ASC
  EMAIL_DESC
  IS_ADMIN_ASC
  IS_ADMIN_DESC
  AVATAR_URL_ASC
  AVATAR_URL_DESC
}

"""
A condition to be used against `User` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input UserCondition {
  """Checks for equality with the object’s `email` field."""
  email: String

  """Checks for equality with the object’s `isAdmin` field."""
  isAdmin: Boolean

  """Checks for equality with the object’s `avatarUrl` field."""
  avatarUrl: String
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `EmailTemplate`."""
  createEmailTemplate(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateEmailTemplateInput!
  ): CreateEmailTemplatePayload

  """Creates a single `EmailTemplateId`."""
  createEmailTemplateId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateEmailTemplateIdInput!
  ): CreateEmailTemplateIdPayload

  """Creates a single `Forum`."""
  createForum(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateForumInput!
  ): CreateForumPayload

  """Creates a single `Post`."""
  createPost(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePostInput!
  ): CreatePostPayload

  """Creates a single `Topic`."""
  createTopic(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTopicInput!
  ): CreateTopicPayload

  """Creates a single `User`."""
  createUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserInput!
  ): CreateUserPayload

  """
  Updates a single `EmailTemplate` using its globally unique id and a patch.
  """
  updateEmailTemplateById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEmailTemplateByIdInput!
  ): UpdateEmailTemplatePayload

  """Updates a single `EmailTemplate` using a unique key and a patch."""
  updateEmailTemplate(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEmailTemplateInput!
  ): UpdateEmailTemplatePayload

  """
  Updates a single `EmailTemplateId` using its globally unique id and a patch.
  """
  updateEmailTemplateIdById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEmailTemplateIdByIdInput!
  ): UpdateEmailTemplateIdPayload

  """Updates a single `EmailTemplateId` using a unique key and a patch."""
  updateEmailTemplateId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEmailTemplateIdInput!
  ): UpdateEmailTemplateIdPayload

  """Updates a single `Forum` using its globally unique id and a patch."""
  updateForumById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateForumByIdInput!
  ): UpdateForumPayload

  """Updates a single `Forum` using a unique key and a patch."""
  updateForum(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateForumInput!
  ): UpdateForumPayload

  """Updates a single `Forum` using a unique key and a patch."""
  updateForumBySlug(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateForumBySlugInput!
  ): UpdateForumPayload

  """Updates a single `Post` using its globally unique id and a patch."""
  updatePostById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePostByIdInput!
  ): UpdatePostPayload

  """Updates a single `Post` using a unique key and a patch."""
  updatePost(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePostInput!
  ): UpdatePostPayload

  """Updates a single `Topic` using its globally unique id and a patch."""
  updateTopicById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTopicByIdInput!
  ): UpdateTopicPayload

  """Updates a single `Topic` using a unique key and a patch."""
  updateTopic(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTopicInput!
  ): UpdateTopicPayload

  """Deletes a single `EmailTemplate` using its globally unique id."""
  deleteEmailTemplateById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEmailTemplateByIdInput!
  ): DeleteEmailTemplatePayload

  """Deletes a single `EmailTemplate` using a unique key."""
  deleteEmailTemplate(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEmailTemplateInput!
  ): DeleteEmailTemplatePayload

  """Deletes a single `EmailTemplateId` using its globally unique id."""
  deleteEmailTemplateIdById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEmailTemplateIdByIdInput!
  ): DeleteEmailTemplateIdPayload

  """Deletes a single `EmailTemplateId` using a unique key."""
  deleteEmailTemplateId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEmailTemplateIdInput!
  ): DeleteEmailTemplateIdPayload

  """Deletes a single `Forum` using its globally unique id."""
  deleteForumById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteForumByIdInput!
  ): DeleteForumPayload

  """Deletes a single `Forum` using a unique key."""
  deleteForum(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteForumInput!
  ): DeleteForumPayload

  """Deletes a single `Forum` using a unique key."""
  deleteForumBySlug(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteForumBySlugInput!
  ): DeleteForumPayload

  """Deletes a single `Post` using its globally unique id."""
  deletePostById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePostByIdInput!
  ): DeletePostPayload

  """Deletes a single `Post` using a unique key."""
  deletePost(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePostInput!
  ): DeletePostPayload

  """Deletes a single `Topic` using its globally unique id."""
  deleteTopicById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTopicByIdInput!
  ): DeleteTopicPayload

  """Deletes a single `Topic` using a unique key."""
  deleteTopic(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTopicInput!
  ): DeleteTopicPayload
  login(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: LoginInput!
  ): LoginPayload
  register(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: RegisterInput!
  ): RegisterPayload
  sendSimpleEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: SendSimpleEmailInput!
  ): SendSimpleEmailPayload
}

"""The output of our create `EmailTemplate` mutation."""
type CreateEmailTemplatePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EmailTemplate` that was created by this mutation."""
  emailTemplate: EmailTemplate

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `EmailTemplateId` that is related to this `EmailTemplate`.
  """
  template: EmailTemplateId

  """An edge for our `EmailTemplate`. May be used by Relay 1."""
  emailTemplateEdge(
    """The method to use when ordering `EmailTemplate`."""
    orderBy: [EmailTemplatesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmailTemplatesEdge
  messages: [OperationMessageInterface]
}

"""All input for the create `EmailTemplate` mutation."""
input CreateEmailTemplateInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `EmailTemplate` to be created by this mutation."""
  emailTemplate: EmailTemplateInput!
}

"""An input for mutations affecting `EmailTemplate`"""
input EmailTemplateInput {
  templateId: String!
  senderEmail: Email!
  subjectTemplate: String!
  plaintextTemplate: String!
  htmlTemplate: String!
  updatedAt: Datetime
  lastEditedByUser: String!
}

"""The output of our create `EmailTemplateId` mutation."""
type CreateEmailTemplateIdPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EmailTemplateId` that was created by this mutation."""
  emailTemplateId: EmailTemplateId

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `EmailTemplateId`. May be used by Relay 1."""
  emailTemplateIdEdge(
    """The method to use when ordering `EmailTemplateId`."""
    orderBy: [EmailTemplateIdsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmailTemplateIdsEdge
  messages: [OperationMessageInterface]
}

"""All input for the create `EmailTemplateId` mutation."""
input CreateEmailTemplateIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `EmailTemplateId` to be created by this mutation."""
  emailTemplateId: EmailTemplateIdInput!
}

"""An input for mutations affecting `EmailTemplateId`"""
input EmailTemplateIdInput {
  templateId: String!
}

"""The output of our create `Forum` mutation."""
type CreateForumPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Forum` that was created by this mutation."""
  forum: Forum

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Forum`. May be used by Relay 1."""
  forumEdge(
    """The method to use when ordering `Forum`."""
    orderBy: [ForumsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ForumsEdge
  messages: [OperationMessageInterface]
}

"""All input for the create `Forum` mutation."""
input CreateForumInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Forum` to be created by this mutation."""
  forum: ForumInput!
}

"""An input for mutations affecting `Forum`"""
input ForumInput {
  rowId: Int

  """An URL-safe alias for the `Forum`."""
  slug: String!

  """The name of the `Forum` (indicates its subject matter)."""
  name: String!

  """A brief description of the `Forum` including it's purpose."""
  description: String
  createdAt: Datetime
  updatedAt: Datetime
}

"""The output of our create `Post` mutation."""
type CreatePostPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Post` that was created by this mutation."""
  post: Post

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Topic` that is related to this `Post`."""
  topic: Topic

  """Reads a single `User` that is related to this `Post`."""
  author: User

  """An edge for our `Post`. May be used by Relay 1."""
  postEdge(
    """The method to use when ordering `Post`."""
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PostsEdge
  messages: [OperationMessageInterface]
}

"""All input for the create `Post` mutation."""
input CreatePostInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Post` to be created by this mutation."""
  post: PostInput!
}

"""An input for mutations affecting `Post`"""
input PostInput {
  topicId: Int!

  """The body of the `Topic`, which Posts reply to."""
  body: String
}

"""The output of our create `Topic` mutation."""
type CreateTopicPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Topic` that was created by this mutation."""
  topic: Topic

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Forum` that is related to this `Topic`."""
  forum: Forum

  """Reads a single `User` that is related to this `Topic`."""
  author: User

  """An edge for our `Topic`. May be used by Relay 1."""
  topicEdge(
    """The method to use when ordering `Topic`."""
    orderBy: [TopicsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TopicsEdge
  messages: [OperationMessageInterface]
}

"""All input for the create `Topic` mutation."""
input CreateTopicInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Topic` to be created by this mutation."""
  topic: TopicInput!
}

"""An input for mutations affecting `Topic`"""
input TopicInput {
  rowId: Int
  forumId: Int!
  authorId: String

  """The title of the `Topic`."""
  title: String!

  """The body of the `Topic`, which Posts reply to."""
  body: String
  createdAt: Datetime
  updatedAt: Datetime
}

"""The output of our create `User` mutation."""
type CreateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was created by this mutation."""
  user: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [NATURAL]
  ): UsersEdge
  messages: [OperationMessageInterface]
}

"""All input for the create `User` mutation."""
input CreateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `User` to be created by this mutation."""
  user: UserInput!
}

"""An input for mutations affecting `User`"""
input UserInput {
  email: String!
  isAdmin: Boolean!
  avatarUrl: String
}

"""The output of our update `EmailTemplate` mutation."""
type UpdateEmailTemplatePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EmailTemplate` that was updated by this mutation."""
  emailTemplate: EmailTemplate

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `EmailTemplateId` that is related to this `EmailTemplate`.
  """
  template: EmailTemplateId

  """An edge for our `EmailTemplate`. May be used by Relay 1."""
  emailTemplateEdge(
    """The method to use when ordering `EmailTemplate`."""
    orderBy: [EmailTemplatesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmailTemplatesEdge
  messages: [OperationMessageInterface]
}

"""All input for the `updateEmailTemplateById` mutation."""
input UpdateEmailTemplateByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `EmailTemplate` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `EmailTemplate` being updated.
  """
  patch: EmailTemplatePatch!
}

"""
Represents an update to a `EmailTemplate`. Fields that are set will be updated.
"""
input EmailTemplatePatch {
  templateId: String
  senderEmail: Email
  subjectTemplate: String
  plaintextTemplate: String
  htmlTemplate: String
  updatedAt: Datetime
  lastEditedByUser: String
}

"""All input for the `updateEmailTemplate` mutation."""
input UpdateEmailTemplateInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `EmailTemplate` being updated.
  """
  patch: EmailTemplatePatch!
  templateId: String!
}

"""The output of our update `EmailTemplateId` mutation."""
type UpdateEmailTemplateIdPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EmailTemplateId` that was updated by this mutation."""
  emailTemplateId: EmailTemplateId

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `EmailTemplateId`. May be used by Relay 1."""
  emailTemplateIdEdge(
    """The method to use when ordering `EmailTemplateId`."""
    orderBy: [EmailTemplateIdsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmailTemplateIdsEdge
  messages: [OperationMessageInterface]
}

"""All input for the `updateEmailTemplateIdById` mutation."""
input UpdateEmailTemplateIdByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `EmailTemplateId` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `EmailTemplateId` being updated.
  """
  patch: EmailTemplateIdPatch!
}

"""
Represents an update to a `EmailTemplateId`. Fields that are set will be updated.
"""
input EmailTemplateIdPatch {
  templateId: String
}

"""All input for the `updateEmailTemplateId` mutation."""
input UpdateEmailTemplateIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `EmailTemplateId` being updated.
  """
  patch: EmailTemplateIdPatch!
  templateId: String!
}

"""The output of our update `Forum` mutation."""
type UpdateForumPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Forum` that was updated by this mutation."""
  forum: Forum

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Forum`. May be used by Relay 1."""
  forumEdge(
    """The method to use when ordering `Forum`."""
    orderBy: [ForumsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ForumsEdge
  messages: [OperationMessageInterface]
}

"""All input for the `updateForumById` mutation."""
input UpdateForumByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Forum` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `Forum` being updated.
  """
  patch: ForumPatch!
}

"""
Represents an update to a `Forum`. Fields that are set will be updated.
"""
input ForumPatch {
  rowId: Int

  """An URL-safe alias for the `Forum`."""
  slug: String

  """The name of the `Forum` (indicates its subject matter)."""
  name: String

  """A brief description of the `Forum` including it's purpose."""
  description: String
  createdAt: Datetime
  updatedAt: Datetime
}

"""All input for the `updateForum` mutation."""
input UpdateForumInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Forum` being updated.
  """
  patch: ForumPatch!
  rowId: Int!
}

"""All input for the `updateForumBySlug` mutation."""
input UpdateForumBySlugInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Forum` being updated.
  """
  patch: ForumPatch!

  """An URL-safe alias for the `Forum`."""
  slug: String!
}

"""The output of our update `Post` mutation."""
type UpdatePostPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Post` that was updated by this mutation."""
  post: Post

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Topic` that is related to this `Post`."""
  topic: Topic

  """Reads a single `User` that is related to this `Post`."""
  author: User

  """An edge for our `Post`. May be used by Relay 1."""
  postEdge(
    """The method to use when ordering `Post`."""
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PostsEdge
  messages: [OperationMessageInterface]
}

"""All input for the `updatePostById` mutation."""
input UpdatePostByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Post` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `Post` being updated.
  """
  patch: PostPatch!
}

"""Represents an update to a `Post`. Fields that are set will be updated."""
input PostPatch {
  """The body of the `Topic`, which Posts reply to."""
  body: String
}

"""All input for the `updatePost` mutation."""
input UpdatePostInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Post` being updated.
  """
  patch: PostPatch!
  rowId: Int!
}

"""The output of our update `Topic` mutation."""
type UpdateTopicPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Topic` that was updated by this mutation."""
  topic: Topic

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Forum` that is related to this `Topic`."""
  forum: Forum

  """Reads a single `User` that is related to this `Topic`."""
  author: User

  """An edge for our `Topic`. May be used by Relay 1."""
  topicEdge(
    """The method to use when ordering `Topic`."""
    orderBy: [TopicsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TopicsEdge
  messages: [OperationMessageInterface]
}

"""All input for the `updateTopicById` mutation."""
input UpdateTopicByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Topic` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `Topic` being updated.
  """
  patch: TopicPatch!
}

"""
Represents an update to a `Topic`. Fields that are set will be updated.
"""
input TopicPatch {
  rowId: Int
  forumId: Int
  authorId: String

  """The title of the `Topic`."""
  title: String

  """The body of the `Topic`, which Posts reply to."""
  body: String
  createdAt: Datetime
  updatedAt: Datetime
}

"""All input for the `updateTopic` mutation."""
input UpdateTopicInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Topic` being updated.
  """
  patch: TopicPatch!
  rowId: Int!
}

"""The output of our delete `EmailTemplate` mutation."""
type DeleteEmailTemplatePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EmailTemplate` that was deleted by this mutation."""
  emailTemplate: EmailTemplate
  deletedEmailTemplateId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `EmailTemplateId` that is related to this `EmailTemplate`.
  """
  template: EmailTemplateId

  """An edge for our `EmailTemplate`. May be used by Relay 1."""
  emailTemplateEdge(
    """The method to use when ordering `EmailTemplate`."""
    orderBy: [EmailTemplatesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmailTemplatesEdge
  messages: [OperationMessageInterface]
}

"""All input for the `deleteEmailTemplateById` mutation."""
input DeleteEmailTemplateByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `EmailTemplate` to be deleted.
  """
  id: ID!
}

"""All input for the `deleteEmailTemplate` mutation."""
input DeleteEmailTemplateInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  templateId: String!
}

"""The output of our delete `EmailTemplateId` mutation."""
type DeleteEmailTemplateIdPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EmailTemplateId` that was deleted by this mutation."""
  emailTemplateId: EmailTemplateId
  deletedEmailTemplateIdId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `EmailTemplateId`. May be used by Relay 1."""
  emailTemplateIdEdge(
    """The method to use when ordering `EmailTemplateId`."""
    orderBy: [EmailTemplateIdsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmailTemplateIdsEdge
  messages: [OperationMessageInterface]
}

"""All input for the `deleteEmailTemplateIdById` mutation."""
input DeleteEmailTemplateIdByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `EmailTemplateId` to be deleted.
  """
  id: ID!
}

"""All input for the `deleteEmailTemplateId` mutation."""
input DeleteEmailTemplateIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  templateId: String!
}

"""The output of our delete `Forum` mutation."""
type DeleteForumPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Forum` that was deleted by this mutation."""
  forum: Forum
  deletedForumId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Forum`. May be used by Relay 1."""
  forumEdge(
    """The method to use when ordering `Forum`."""
    orderBy: [ForumsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ForumsEdge
  messages: [OperationMessageInterface]
}

"""All input for the `deleteForumById` mutation."""
input DeleteForumByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Forum` to be deleted.
  """
  id: ID!
}

"""All input for the `deleteForum` mutation."""
input DeleteForumInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: Int!
}

"""All input for the `deleteForumBySlug` mutation."""
input DeleteForumBySlugInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """An URL-safe alias for the `Forum`."""
  slug: String!
}

"""The output of our delete `Post` mutation."""
type DeletePostPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Post` that was deleted by this mutation."""
  post: Post
  deletedPostId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Topic` that is related to this `Post`."""
  topic: Topic

  """Reads a single `User` that is related to this `Post`."""
  author: User

  """An edge for our `Post`. May be used by Relay 1."""
  postEdge(
    """The method to use when ordering `Post`."""
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PostsEdge
  messages: [OperationMessageInterface]
}

"""All input for the `deletePostById` mutation."""
input DeletePostByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Post` to be deleted.
  """
  id: ID!
}

"""All input for the `deletePost` mutation."""
input DeletePostInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: Int!
}

"""The output of our delete `Topic` mutation."""
type DeleteTopicPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Topic` that was deleted by this mutation."""
  topic: Topic
  deletedTopicId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Forum` that is related to this `Topic`."""
  forum: Forum

  """Reads a single `User` that is related to this `Topic`."""
  author: User

  """An edge for our `Topic`. May be used by Relay 1."""
  topicEdge(
    """The method to use when ordering `Topic`."""
    orderBy: [TopicsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TopicsEdge
  messages: [OperationMessageInterface]
}

"""All input for the `deleteTopicById` mutation."""
input DeleteTopicByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Topic` to be deleted.
  """
  id: ID!
}

"""All input for the `deleteTopic` mutation."""
input DeleteTopicInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: Int!
}

"""The output of our `login` mutation."""
type LoginPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  jwtToken: JwtToken

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  messages: [OperationMessageInterface]
}

"""
A JSON Web Token defined by [RFC 7519](https://tools.ietf.org/html/rfc7519)
which securely represents claims between two parties.
"""
scalar JwtToken

"""All input for the `login` mutation."""
input LoginInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  email: String
  pass: String
}

"""The output of our `register` mutation."""
type RegisterPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  boolean: Boolean

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  messages: [OperationMessageInterface]
}

"""All input for the `register` mutation."""
input RegisterInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  email: String
  pass: String
}

"""The output of our `sendSimpleEmail` mutation."""
type SendSimpleEmailPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  boolean: Boolean

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  messages: [OperationMessageInterface]
}

"""All input for the `sendSimpleEmail` mutation."""
input SendSimpleEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  email: String
  subject: String
  body: String
  html: String
}
